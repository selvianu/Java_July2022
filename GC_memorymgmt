+ memory management
	+ process of allocating new objects and removing unused objects to 
	make space for those new object allocations.
	+ Heap 
		+ object/class instances,array
		+The default Java heap size is 1280 MB, which supports fewer than 75,000 pairs
		+ The heap is created when the JVM starts up
	+ Stack - 
		+ local variables, and reference variables. 
		+ Stack memory is always referenced in Last-In-First-Out order. 
		+ Local variables are created in the stack.
		+ generates when a thread creates
	+ Variable
	+ Object
	+ String- String Pool -
+ Garbage Collector
	+ automatically performs the allocation or deallocation of memory.
	+ On the basis of how many clock cycles the objects have survived, 
	objects are grouped and are allocated an ‘age’ accordingly. 
	This way the garbage collection work gets distributed.
	+ Ways to make an object eligible for Garbage Collector
		+ Nullifying the reference variable
		+ Re-assigning the reference variable
		+ An object created inside the method
	+ Ways for requesting JVM to run Garbage Collector
		+ it may not destroy immediately by the garbage collector. 
		+ Whenever JVM runs the Garbage Collector program, then only the object will be destroyed. 
		+ But when JVM runs Garbage Collector, we can not expect.
		+ We can also request JVM to run Garbage Collector - two ways: 
			+ Using System.gc() method: 
			System class contain static method gc() for requesting JVM to run Garbage Collector.
			+ Using Runtime.getRuntime().gc() method: 
			Runtime class allows the application to interface with the JVM in which the application is running. 
			Hence by using its gc() method, we can request JVM to run Garbage Collector.
		+ The call System.gc() is effectively equivalent to the call : Runtime.getRuntime().gc()